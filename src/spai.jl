# File: spai.jl
# Author: Bastien Vieubl√©
# Email: bastien.vieuble@amss.ac.cn
# Github: https://github.com/bvieuble

"""
```julia
M::SparseMatrixCSC{Tv,Ti} = spai(
    A ::Union{SparseMatrixCSC{Tv,Ti},Adjoint{Tv,SparseMatrixCSC{Tv,Ti}}},  # \
        Sparse matrix A we compute the SPAI of 
    œµ ::Float64,  # Accuracy of the approximation
    Œ± ::Integer,  # Maximum number of time we refine a column 
    Œ≤ ::Integer   # Maximum number of nnz to add in a column \
                                   after one refinement
) where {Tv<:AbstractFloat,Ti<:Integer} 
```
Computation of Sparse Approximate Inverse preconditioner (SPAI) of a given 
sparse matrix A. This implementation is a Julia rewrite of the Matlab code of this 
[github repo](https://github.com/Noaman67khan/SPAI-GMRES-IR), which is itself
the companion code of the article *"Mixed Precision Iterative Refinement with Sparse
Approximate Inverse Preconditioning"*[^2].

[^2]: Erin Carson & Noaman Khan, *"Mixed Precision Iterative Refinement with 
      Sparse Approximate Inverse Preconditioning"*, SIAM Journal on Scientific 
      Computing, **(2023)**.

In more detail, the function implement the following algorithm from[^2]. Note 
however that, in our implementation, the initial sparsity pattern 
\$\\mathcal{J}\$ is set to be always the identity.

![spai_img](./assets/spai.png)
"""
function spai(
        A::Union{SparseMatrixCSC{Tv,Ti},Adjoint{Tv,SparseMatrixCSC{Tv,Ti}}}, 
        œµ::Float64,
        Œ±::Integer, 
        Œ≤::Integer
    ) where {Tv<:AbstractFloat,Ti<:Integer}

    if (typeof(A) != SparseMatrixCSC{eltype(A),Int64} &&
        typeof(A) != Adjoint{eltype(A),SparseMatrixCSC{eltype(A),Int64}})
        error("A should be a SparseMatrixCSC object.")
    end

    n = size(A)[1];
    ùêΩ = sparse(I, n, n);
    M = spzeros(eltype(A), n, n);

    # Loop on the columns
    for k = 1:n
        e‚Çñ = Matrix(I, n, n)[:, k];
        ùêΩ‚Çñ = findall(ùêΩ[:, k]);

        # Refine Œ± times the column
        for _ = 1:Œ±

            # Compute the shadow of Jk
            ùêº‚Çñ = Int64[];
            for i in sort(unique(A[:, ùêΩ‚Çñ].rowval))
                if sum(abs.(A[i, ùêΩ‚Çñ])) != 0
                    ùêº‚Çñ = push!(ùêº‚Çñ, i);
                end
            end

            # Compute the kth column of M
            A‚Çñ‚Åª = A[ùêº‚Çñ, ùêΩ‚Çñ];
            e‚Çñ‚Åª = e‚Çñ[ùêº‚Çñ];
            # Julia QR facto on sparse matrix leads to instabilities. For this
            # reason, the factorization is performed on a densified matrix.
            # QRtk = qr(Atk); 
            QR‚Çñ = qr(Matrix(A‚Çñ‚Åª));

            m‚Çñ‚Åª = QR‚Çñ \ e‚Çñ‚Åª;
            M[ùêΩ‚Çñ, k] = m‚Çñ‚Åª;
            s‚Çñ‚Åª = A‚Çñ‚Åª * m‚Çñ‚Åª - e‚Çñ‚Åª;

            # If the residual is satisfying we stop the iterations
            if (norm(s‚Çñ‚Åª) < œµ)
                break;
            end

            # If the residual is not satisfying we add nonzeros in mk
            ùêø‚Çñ = union(ùêº‚Çñ, k);
 
            ùêΩ‚Çñ‚Å∫ = Int64[];
            for ll = 1:size(ùêø‚Çñ)[1]
                l = ùêø‚Çñ[ll];
                ùëÅ = Int64[];
                for j in A[l, :].nzind
                    if (A[l, j] != 0)
                        ùëÅ = union(ùëÅ, j);
                    end
                end
                ùêΩ‚Çñ‚Å∫ = union(ùêΩ‚Çñ‚Å∫, ùëÅ);
            end
            ùêΩ‚Çñ‚Å∫ = setdiff(ùêΩ‚Çñ‚Å∫, ùêΩ‚Çñ);

            # Adding indices
            œÅ‚Çñ = 0;
            Œ°‚Çñ = Float64[];
            Œ°‚Çñ_idx = Int64[];
            n1 = norm(s‚Çñ‚Åª, 2);

            for jj = 1:size(ùêΩ‚Çñ‚Å∫)[1]
                j = ùêΩ‚Çñ‚Å∫[jj];

                n2 = norm(Vector(A[ùêº‚Çñ, j]), 2);
                # n2 = norm(A[Ik,j]);

                œÅ‚±º‚Çñ = sqrt(abs((n1^2 - ((s‚Çñ‚Åª' * A[ùêº‚Çñ, j])^2 / (n2^2)))));
                œÅ‚Çñ = œÅ‚Çñ + œÅ‚±º‚Çñ;
                push!(Œ°‚Çñ, œÅ‚±º‚Çñ);
                push!(Œ°‚Çñ_idx, j);
            end
            # Rojk = reduce(vcat, transpose.(Rojk));

            œÅ‚Çñ = œÅ‚Çñ / (size(ùêΩ‚Çñ‚Å∫)[1]);

            # Select new column nonzeroes to add
            perm = partialsortperm(Œ°‚Çñ, 1:min(size(Œ°‚Çñ)[1], Œ≤));
            for idx = 1:min(size(Œ°‚Çñ)[1], Œ≤)
                if (Œ°‚Çñ[perm][idx] <= œÅ‚Çñ)
                    j = Œ°‚Çñ_idx[perm][idx];
                    ùêΩ‚Çñ = union(ùêΩ‚Çñ, j);
                    ùêΩ‚Çñ‚Å∫ = setdiff(ùêΩ‚Çñ‚Å∫, j);
                else
                    break
                end
            end
        end
    end

    return M;
end
